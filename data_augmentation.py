# -*- coding: utf-8 -*-
"""Data Augmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15bewWlNZmLQYbkJASE2j2hYj5aE3UvgZ

# **Getting Started with Image Augmentation in Python**

> Load the required libraries used in this notebook
"""

import os
import cv2
import numpy as np
import pandas as pd
import random
#import ipyplot
from google.colab.patches import cv2_imshow
import matplotlib.pyplot as plt
from skimage.segmentation import slic
from skimage.color import label2rgb
from skimage import measure

"""# **Mount Google Drive and Import Data**


> Notes: Please change the image directory by copy the path of the folder containing your image data inside your Google Drive.


"""

## Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

## Change image directory
os.chdir('/content/drive/MyDrive/Utm/Dyson/DataAugmentation(Unstructured)/Image Exercise') ## Change this to your folder path

"""# **Rotating Image**"""

## Read image
image = cv2.imread('cat_3.jpg',1) ## example: (image_name.jpg, 1 for colour ignoring transparency, 0 for grayscale, -1 for unchanged such as including alpha channel)

## Rotate image
## Rotate 90 clockwise
image_rotate_90_clockwise = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)
## Rotate 90 counterclockwise
image_rotate_90_counterclockwise = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)
## Rotate 180
image_rotate_180 = cv2.rotate(image, cv2.ROTATE_180)

## Compiled all images
compimg = cv2.hconcat((image_rotate_90_clockwise, image_rotate_90_counterclockwise, image_rotate_180))

## Display image
cv2_imshow(compimg)

#cv2_imshow(image_rotate_90_clockwise)
#cv2_imshow(image_rotate_90_counterclockwise)
#cv2_imshow(image_rotate_180)

"""# **Flipping Image**"""

## Applying flip function
## flipcode: = 0 means vertically, ,
image_flip_vertically = cv2.flip(image, 0)
## flipcode: > 0 means horizontally
image_flip_horizontally = cv2.flip(image, 1)
## flipcode: < 0 means vertically and horizontally
image_flip_vertically_and_horizontally = cv2.flip(image, -1)

## Compiled all images
compimg = cv2.hconcat((image_flip_vertically, image_flip_horizontally, image_flip_vertically_and_horizontally))

## Display image
cv2_imshow(compimg)

#cv2_imshow(image_flip_vertically)
#cv2_imshow(image_flip_horizontally)
#cv2_imshow(image_flip_vertically_and_horizontally)

"""# **Scaling Image**"""

## Print text
print('Original Dimensions : ',image.shape)

## Applying original size
scale_percent = 60/100 # percent of original size
width = int(image.shape[1] * scale_percent)
height = int(image.shape[0] * scale_percent)
dimension = (width, height)

# Resize image
resized = cv2.resize(image, dimension, interpolation = cv2.INTER_AREA)

## Print text
print('Resized Dimensions : ',resized.shape)

## Display image
cv2_imshow(resized)

"""# **Changing Brightness and Contrast of Image**"""

## Define alpha (contrast) and beta (brightness)
alpha = 100
beta = 4

## Calling the convertScaleAbs function
contrast_brightness_image = cv2.convertScaleAbs(image, alpha, beta)

## Display image
cv2_imshow(contrast_brightness_image)

"""# **Adding Noise to Image**"""

## Define mean and standard deviation values
mean = 2
stddev = 3  # Adjust the standard deviation as needed
noise = np.random.normal(mean, stddev, image.shape).astype(np.uint8)
noisy_image = cv2.add(image, noise)

## Display image
cv2_imshow(noisy_image)

"""# **Cropping Image**"""

## Insert assigned variable: [starting point y axis: end point y axis, starting point x axis:end point x axis]
cropped_image = image[330:450, 90:400]

## Display image
cv2_imshow(cropped_image)